1. Write a Students-Papers schema, where 'Students' has id and first name AND 'Papers' has title, grade (numeric), student_id (related to id from 'Students') 
*Insert provided data*

1.1) CREATE TABLE students (
     	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
     	first_name VARCHAR(100) NOT NULL
     );
1.2) CREATE TABLE papers (
     	title VARCHAR(100),
     	grade INT,
     	student_id INT,
     	FOREIGN KEY (student_id) 
			REFERENCES students(id) 
			ON DELETE CASCADE
     );

2. Print name, paper (title), grade for students who have submitted papers

SELECT first_name, title, grade
FROM students
  JOIN papers
    ON students.id=papers.student_id
ORDER BY grade DESC;
+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Samantha   | De Montaigne and The Art of The Essay |    98 |
| Samantha   | Russian Lit Through The Ages          |    94 |
| Carlos     | Borges and Magical Realism            |    89 |
| Caleb      | My Second Book Report                 |    75 |
| Caleb      | My First Book Report                  |    60 |
+------------+---------------------------------------+-------+

3. Print name, paper (title), grade for all students

SELECT first_name, title, grade
FROM students
  LEFT JOIN papers
    ON students.id=papers.student_id;
+------------+---------------------------------------+-------+
| first_name | title                                 | grade |
+------------+---------------------------------------+-------+
| Caleb      | My First Book Report                  |    60 |
| Caleb      | My Second Book Report                 |    75 |
| Samantha   | Russian Lit Through The Ages          |    94 |
| Samantha   | De Montaigne and The Art of The Essay |    98 |
| Raj        | NULL                                  |  NULL |
| Carlos     | Borges and Magical Realism            |    89 |
| Lisa       | NULL                                  |  NULL |
+------------+---------------------------------------+-------+

4. Print name, paper (title), grade for all students. Make sure that it's more readable, use 'MISSING' or 0

SELECT first_name,
       IFNULL(title, 'MISSING'),
       IFNULL(grade, 0)
FROM   students
       LEFT JOIN papers
              ON students.id = papers.student_id; 
+------------+---------------------------------------+------------------+
| first_name | IFNULL(title, 'MISSING')              | IFNULL(grade, 0) |
+------------+---------------------------------------+------------------+
| Caleb      | My First Book Report                  |               60 |
| Caleb      | My Second Book Report                 |               75 |
| Samantha   | Russian Lit Through The Ages          |               94 |
| Samantha   | De Montaigne and The Art of The Essay |               98 |
| Raj        | MISSING                               |                0 |
| Carlos     | Borges and Magical Realism            |               89 |
| Lisa       | MISSING                               |                0 |
+------------+---------------------------------------+------------------+

5. Pring name and average grade for every student in descending order

SELECT first_name,
       IFNULL(Avg(grade), 0) AS 'average'
FROM   students
       LEFT JOIN papers
              ON students.id = papers.student_id
GROUP  BY students.id
ORDER  BY average DESC; 
+------------+---------+
| first_name | average |
+------------+---------+
| Samantha   | 96.0000 |
| Carlos     | 89.0000 |
| Caleb      | 67.5000 |
| Raj        |  0.0000 |
| Lisa       |  0.0000 |
+------------+---------+

6. Pring name, average grade for every student in descending order, and Passing Status (passing average = 75)

SELECT first_name,
       Ifnull(Avg(grade), 0) AS 'average',
       CASE
         WHEN Avg(grade) >= 75 THEN 'PASSING'
         ELSE 'FAILING'my
       END AS passing_status
FROM   students
       LEFT JOIN papers
              ON students.id = papers.student_id
GROUP  BY students.id
ORDER  BY average DESC; 
+------------+---------+----------------+
| first_name | average | passing_status |
+------------+---------+----------------+
| Samantha   | 96.0000 | PASSING        |
| Carlos     | 89.0000 | PASSING        |
| Caleb      | 67.5000 | FAILING        |
| Raj        |  0.0000 | FAILING        |
| Lisa       |  0.0000 | FAILING        |
+------------+---------+----------------+

## NOTE: Another WHEN can be added to check for when grade=NULL and make sure that the status is 'FAILING'. It works without it, because AVG(NULL) returns NULL, which is not >= to 75 (so the ELSE kicks in) ##